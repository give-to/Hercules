src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java:40:replace:0,42$if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1)<='#') {int start = index + 2;boolean isHex = false;char firstChar = input.charAt(start);if(firstChar == 'x' || firstChar == 'X') {start++;isHex = true;}int end = start;while(input.charAt(end) != ';'){end++;}int entityValue;try {if(isHex) {entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);} else {entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);}} catch(NumberFormatException nfe) {System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");return 0;}if(entityValue > 0xFFFF) {char[] chrs = Character.toChars(entityValue);out.write(chrs[0]);out.write(chrs[1]);} else {out.write(entityValue);}return 2 + (end - start) + (isHex ? 1 : 0) + 1;}
src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java:31:replace:0,42$/ * * * Translate XML numeric entities of the form & # [ xX ] ? \d + ; ? to * the specific codepoint . * * Note that the semi - colon is optional . * * @since 3 . 0 * @version $Id$ * / public class NumericEntityUnescaper extends CharSequenceTranslator { / * * * { @inheritDoc } * / @Override public int translate ( CharSequence input , int index , Writer out ) throws IOException { int seqEnd = input . length ( ) ; / / Uses - 2 to ensure there is something after the & # if ( input . charAt ( index ) == ' & ' && index < seqEnd - 1 && input . charAt ( index + 1 ) < = '#' ) { int start = index + 2 ; boolean isHex = false ; char firstChar = input . charAt ( start ) ; if ( firstChar == 'x' || firstChar == 'X' ) { start + + ; isHex = true ; } int end = start ; while ( input . charAt ( end ) != ' ; ' ) { end + + ; } int entityValue ; try { if ( isHex ) { entityValue = Integer . parseInt ( input . subSequence ( start , end ) . toString ( ) , 16 ) ; } else { entityValue = Integer . parseInt ( input . subSequence ( start , end ) . toString ( ) , 10 ) ; } } catch ( NumberFormatException nfe ) { System . err . println ( "FAIL : " + input . subSequence ( start , end ) + " [ " + start + " ] [ " + end + " ] " ) ; return 0 ; } if ( entityValue > 0xFFFF ) { char [ ] chrs = Character . toChars ( entityValue ) ; out . write ( chrs [ 0 ] ) ; out . write ( chrs [ 1 ] ) ; } else { out . write ( entityValue ) ; } return 2 + ( end - start ) + ( isHex ? 1 : 0 ) + 1 ;                                                }                                                                                                                                                                                                                       return 0 ; } }
