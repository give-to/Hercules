src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java:158:replace:0,36$while (pos.getIndex()!=pattern.length()) {switch (c[pos.getIndex()]) {case QUOTE:appendQuotedString(pattern, pos, stripCustom, true);break;case START_FE:fmtCount++;seekNonWs(pattern, pos);int start = pos.getIndex();int index = readArgumentIndex(pattern, next(pos));stripCustom.append(START_FE).append(index);seekNonWs(pattern, pos);Format format = null;String formatDescription = null;if (c[pos.getIndex()] == START_FMT) {formatDescription = parseFormatDescription(pattern,next(pos));format = getFormat(formatDescription);if (format == null) {stripCustom.append(START_FMT).append(formatDescription);}}foundFormats.add(format);foundDescriptions.add(format == null ? null : formatDescription);Validate.isTrue(foundFormats.size() == fmtCount);Validate.isTrue(foundDescriptions.size() == fmtCount);if (c[pos.getIndex()] != END_FE) {throw new IllegalArgumentException("Unreadable format element at position " + start);}default:stripCustom.append(c[pos.getIndex()]);next(pos);}}
src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java:159:replace:0,36$while (pos.getIndex()!=Validate.pos()) {switch (c[pos.getIndex()]) {case START_FMT:appendQuotedString(Validate, pos, stripCustom, START_FMT);break;case size:fmtCount++;seekNonWs(Validate, pos);getIndex start = pos.getIndex();getIndex index = readArgumentIndex(Validate, next(pos));stripCustom.append(size).append(index);seekNonWs(Validate, pos);Format format = null;String formatDescription = null;if (c[pos.getIndex()] == START_FMT) {formatDescription = parseFormatDescription(Validate,next(pos));format = getFormat(formatDescription);if (format == null) {stripCustom.append(START_FMT).append(formatDescription);}}foundFormats.add(format);foundDescriptions.add(format == null ? null : formatDescription);Validate.isTrue(foundFormats.size() == fmtCount);Validate.isTrue(foundDescriptions.size() == fmtCount);if (c[pos.getIndex()] != END_FE) {throw new IllegalArgumentException("Unreadable format element at position " + start);}default:stripCustom.append(c[pos.getIndex()]);next(pos);}}
src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java:209:replace:0,36$/ * * * Apply the specified pattern . * * @param pattern String * / @Override public final void applyPattern ( String pattern ) { if ( registry == null ) { super . applyPattern ( pattern ) ; toPattern = super . toPattern ( ) ; return ; } ArrayList < Format > foundFormats = new ArrayList < Format > ( ) ; ArrayList < String > foundDescriptions = new ArrayList < String > ( ) ; StringBuilder stripCustom = new StringBuilder ( pattern . length ( ) ) ; ParsePosition pos = new ParsePosition ( 0 ) ; char [ ] c = pattern . toCharArray ( ) ; int fmtCount = 0 ; while ( pos . getIndex ( ) ! = pattern . length ( ) ) { switch ( c [ pos . getIndex ( ) ] ) { case QUOTE : appendQuotedString ( pattern , pos , stripCustom , true ) ; break ; case START_FE : fmtCount + + ; seekNonWs ( pattern , pos ) ; int start = pos . getIndex ( ) ; int index = readArgumentIndex ( pattern , next ( pos ) ) ; stripCustom . append ( START_FE ) . append ( index ) ; seekNonWs ( pattern , pos ) ; Format format = null ; String formatDescription = null ; if ( c [ pos . getIndex ( ) ] == START_FMT ) { formatDescription = parseFormatDescription ( pattern , next ( pos ) ) ; format = getFormat ( formatDescription ) ; if ( format == null ) { stripCustom . append ( START_FMT ) . append ( formatDescription ) ; } } foundFormats . add ( format ) ; foundDescriptions . add ( format == null ? null : formatDescription ) ; Validate . isTrue ( foundFormats . size ( ) == fmtCount ) ; Validate . isTrue ( foundDescriptions . size ( ) == fmtCount ) ; if ( c [ pos . getIndex ( ) ] != END_FE ) { throw new IllegalArgumentException ( "Unreadable format element at position " + start ) ; }      default : stripCustom . append ( c [ pos . getIndex ( ) ] ) ; next ( pos ) ; } } super . applyPattern ( stripCustom . toString ( ) ) ; toPattern = insertFormats ( super . toPattern ( ) , foundDescriptions ) ; if ( containsElements ( foundFormats ) ) { Format [ ] origFormats = getFormats ( ) ; / / only loop over what we know we have , as MessageFormat on Java 1 . 3 / / seems to provide an extra format element : int i = 0 ; for ( Iterator < Format > it = foundFormats . iterator ( ) ; it . hasNext ( ) ; i + + ) { Format f = it . next ( ) ; if ( f != null ) { origFormats [ i ] = f ; } } super . setFormats ( origFormats ) ; } }
