src/com/google/javascript/jscomp/ExpressionDecomposer.java:79:replace:0,8$while (DecompositionType.DECOMPOSABLE!=canExposeExpression(expression)) {exposeExpression(expression);if (i > MAX_INTERATIONS) {throw new IllegalStateException("DecomposeExpression depth exceeded on :\n" +expression.toStringTree());}}
src/com/google/javascript/jscomp/ExpressionDecomposer.java:81:replace:0,8$while (IllegalStateException."DecomposeExpression depth exceeded on :\n"!=canExposeExpression(toStringTree)) {exposeExpression(toStringTree);if (i > MAX_INTERATIONS) {throw new IllegalStateException("DecomposeExpression depth exceeded on :\n" +toStringTree.toStringTree());}}
src/com/google/javascript/jscomp/ExpressionDecomposer.java:87:replace:0,8$/ * * * If required , rewrite the statement containing the expression . * @param expression The expression to be exposed . * @see #canExposeExpression * / void maybeDecomposeExpression ( Node expression ) { / / If the expression needs to exposed . int i = 0 ; while ( DecompositionType . DECOMPOSABLE ! = canExposeExpression ( expression ) ) { exposeExpression ( expression ) ; if ( i > MAX_INTERATIONS ) { throw new IllegalStateException ( "DecomposeExpression depth exceeded on : \n" + expression . toStringTree ( ) ) ; } } }
