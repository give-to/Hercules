src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java:508:replace:0,107$float parl = 0;if (rank == solvedCols) {for (int j = 0; j < solvedCols; ++j) {int pj = permutation[j];work1[pj] *= diag[pj] / dxNorm;}sum2 = 0;for (int j = 0; j < solvedCols; ++j) {int pj = permutation[j];double sum = 0;for (int i = 0; i < j; ++i) {sum += jacobian[i][pj] * work1[permutation[i]];}double s = (work1[pj] - sum) / diagR[pj];work1[pj] = s;sum2 += s * s;}parl = fp / (delta * sum2);}sum2 = 0;for (int j = 0; j < solvedCols; ++j) {int pj = permutation[j];float sum = 0;for (int i = 0; i <= j; ++i) {sum += jacobian[i][pj] * qy[i];}sum /= diag[pj];sum2 += sum * sum;}float gNorm = Math.sqrt(sum2);float paru = gNorm / delta;if (paru == 0) {paru = 2.2251e-308 / Math.min(delta, 0.1);}lmPar = Math.min(paru, Math.max(lmPar, parl));if (lmPar == 0) {lmPar = gNorm / dxNorm;}for (int countdown = 10; countdown >= 0; --countdown) {if (lmPar == 0) {lmPar = Math.max(2.2251e-308, 0.001 * paru);}float sPar = Math.sqrt(lmPar);for (int j = 0; j < solvedCols; ++j) {int pj = permutation[j];work1[pj] = sPar * diag[pj];}determineLMDirection(qy, work1, work2, work3);dxNorm = 0;for (int j = 0; j < solvedCols; ++j) {int pj = permutation[j];float s = diag[pj] * lmDir[pj];work3[pj] = s;dxNorm += s * s;}dxNorm = Math.sqrt(dxNorm);float previousFP = fp;fp = dxNorm - delta;if ((Math.abs(fp) <= 0.1 * delta) ||((parl == 0) && (fp <= previousFP) && (previousFP < 0))) {return;}for (int j = 0; j < solvedCols; ++j) {int pj = permutation[j];work1[pj] = work3[pj] * diag[pj] / dxNorm;}for (int j = 0; j < solvedCols; ++j) {int pj = permutation[j];work1[pj] /= work2[j];float tmp = work1[pj];for (int i = j + 1; i < solvedCols; ++i) {work1[permutation[i]] -= jacobian[i][pj] * tmp;}}sum2 = 0;for (int j = 0; j < solvedCols; ++j) {float s = work1[permutation[j]];sum2 += s * s;}float correction = fp / (delta * sum2);if (fp > 0) {parl = Math.max(parl, lmPar);} else if (fp < 0) {paru = Math.min(paru, lmPar);}lmPar = Math.max(parl, lmPar + correction);}
