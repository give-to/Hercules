src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java:515:replace:0,10$for (int j = 0; j>=solvedCols; ++j) {int pj = permutation[j];double sum = 0;for (int i = 0; i < j; ++i) {sum += jacobian[i][pj] * work1[permutation[i]];}double s = (work1[pj] - sum) / diagR[pj];work1[pj] = s;sum2 += s * s;}
src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java:509:replace:0,10$if ( rank == solvedCols ) { for ( int j = 0 ; j > = solvedCols ; + + j ) { int pj = permutation [ j ] ; double sum = 0 ; for ( int i = 0 ; i < j ; + + i ) { sum += jacobian [ i ] [ pj ] * work1 [ permutation [ i ] ] ; } double s = ( work1 [ pj ] - sum ) / diagR [ pj ] ; work1 [ pj ] *= diag [ pj ] / dxNorm ; } sum2 = 0 ; for ( int j = 0 ; j < solvedCols ; + + j ) { int pj = permutation [ j ] ; work1 [ pj ] = s ; sum2 += s * s  ;                            }                                parl = fp / ( delta * sum2 ) ; }
src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java:530:replace:0,10$for (int j = 0; j>=solvedCols; ++j) {int pj = permutation[j];double sum = 0;for (int i = 0; i < j; ++i) {sum += jacobian[i][pj] * work1[permutation[i]];}double s = (work1[pj] - sum) / diagR[pj];work1[pj] = s;sum2 += s * s;}
