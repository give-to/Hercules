src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java:208:replace:0,13$if (paramType == null) {Node left = callee.getFirstChild();Node right = callee.getLastChild();if (left.getType() == NAME && "goog".equals(left.getString()) &&right.getType() == STRING) {Function<TypeRestriction, JSType> restricter =restricters.get(right.getString());if (restricter != null) {return restrictParameter(param, paramType, blindScope, restricter,outcome);}}}
src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java:206:replace:0,13$if ( callee . getType ( ) == GETPROP && param . isQualifiedName ( ) ) { JSType paramType == null ) { Node left = callee . getFirstChild ( ) ; Node right = callee . getLastChild ( ) ; if ( left . getType ( ) == NAME && "goog" . equals ( left . getString ( ) ) & & right . getType ( ) == STRING ) { Function < TypeRestriction , JSType > restricter = restricters . get ( right . getString ( ) ) ; if ( restricter = getTypeIfRefinable ( param , blindScope ) ; if ( paramType != null ) { return restrictParameter     ( param , paramType , blindScope , restricter , outcome ) ;                                                                                } } } }
src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java:203:replace:0,13$if ( condition . getType ( ) == CALL && condition . getChildCount ( ) == 2 ) { Node callee = condition . getFirstChild ( ) ; Node param = condition . getLastChild ( ) ; if ( callee . getType ( ) == GETPROP && param . isQualifiedName ( ) ) { JSType paramType == null ) { Node left = callee . getFirstChild ( ) ; Node right = callee . getLastChild ( ) ; if ( left . getType ( ) == NAME && "goog" . equals ( left . getString ( ) ) & & right . getType ( ) == STRING ) { Function < TypeRestriction , JSType > restricter = restricters . get ( right . getString ( ) ) ; if ( restricter = getTypeIfRefinable ( param , blindScope ) ; if ( paramType != null ) { return restrictParameter     ( param , paramType , blindScope , restricter , outcome ) ;                                                                                } } } } }
