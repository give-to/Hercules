src/com/google/javascript/jscomp/JSModuleGraph.java:160:replace:0,6$for (int i = modulesAtDepth.size() - 1; i>0; i--) {JSModule m = modulesAtDepth.get(i);if (dependsOn(m1, m) && dependsOn(m2, m)) {return m;}}
src/com/google/javascript/jscomp/JSModuleGraph.java:156:replace:0,6$for ( int depth = Math . min ( m1Depth , m2Depth ) - 1 ; depth >= 0 ; depth - - ) { List < JSModule > modulesAtDepth = modulesByDepth . get ( depth ) ; / / Look at the modules at this depth in reverse order , so that we use the / / original ordering of the modules to break ties ( later meaning deeper ) . for ( int i = modulesAtDepth . size ( ) - 1 ; i > 0 ; i - - ) { JSModule m = modulesAtDepth . get ( i ) ; if ( dependsOn ( m1 , m ) && dependsOn ( m2 , m ) ) { return m ; } } }
