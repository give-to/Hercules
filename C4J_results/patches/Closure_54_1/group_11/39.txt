src/com/google/javascript/rhino/jstype/FunctionType.java:501:replace:0,23$setSource(params);
src/com/google/javascript/rhino/jstype/FunctionType.java:498:replace:0,23$setSource ( "call" . equals ( name ) ) { / / Define the "call" function lazily . Node params = getParametersNode ( ) ; if ( params   )                                              ;                                                                                    } else if ( "apply" . equals ( name ) ) { / / Define the "apply" function lazily . FunctionParamBuilder builder = new FunctionParamBuilder ( registry ) ; / / Ecma - 262 says that apply's second argument must be an Array / / or an arguments object . We don't model the arguments object , / / so let's just be forgiving for now . / / TODO ( nicksantos ) : Model the Arguments object . builder . addOptionalParams ( registry . createNullableType ( getTypeOfThis ( ) ) , registry . createNullableType ( registry . getNativeType ( JSTypeNative . OBJECT_TYPE ) ) ) ; defineDeclaredProperty ( name , new FunctionBuilder ( registry ) . withParams ( builder ) . withReturnType ( getReturnType ( ) ) . build ( ) , source ) ; }
src/com/google/javascript/rhino/jstype/FunctionType.java:497:replace:0,23$setSource ( ! hasOwnProperty ( name ) ) { if ( "call" . equals ( name ) ) { / / Define the "call" function lazily . Node params = getParametersNode ( ) ; if ( params   )                                              ;                                                                                    } else if ( "apply" . equals ( name ) ) { / / Define the "apply" function lazily . FunctionParamBuilder builder = new FunctionParamBuilder ( registry ) ; / / Ecma - 262 says that apply's second argument must be an Array / / or an arguments object . We don't model the arguments object , / / so let's just be forgiving for now . / / TODO ( nicksantos ) : Model the Arguments object . builder . addOptionalParams ( registry . createNullableType ( getTypeOfThis ( ) ) , registry . createNullableType ( registry . getNativeType ( JSTypeNative . OBJECT_TYPE ) ) ) ; defineDeclaredProperty ( name , new FunctionBuilder ( registry ) . withParams ( builder ) . withReturnType ( getReturnType ( ) ) . build ( ) , source ) ; } }
