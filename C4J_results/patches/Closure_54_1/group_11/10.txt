src/com/google/javascript/rhino/jstype/FunctionType.java:501:replace:0,23$if (toMaybeFunctionType() == null) {defineDeclaredProperty(name,new FunctionBuilder(registry).withReturnType(getReturnType()).build(),source);} else {params = params.cloneTree();Node thisTypeNode = Node.newString(Token.NAME, "thisType");thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));params.addChildToFront(thisTypeNode);thisTypeNode.setOptionalArg(true);defineDeclaredProperty(name,new FunctionBuilder(registry).withParamsNode(params).withReturnType(getReturnType()).build(),source);}
src/com/google/javascript/rhino/jstype/FunctionType.java:498:replace:0,23$if ( toMaybeFunctionType ( ) == null ) { defineDeclaredProperty ( name , new FunctionBuilder ( registry ) . withReturnType ( getReturnType ( ) ) . build ( ) , source ) ; } else { "call" . equals ( name ) ) { / / Define the "call" function lazily . Node params = getParametersNode ( ) ; if ( params = params . cloneTree ( ) ; Node thisTypeNode = Node . newString ( Token . NAME , "thisType" ) ; thisTypeNode . setJSType ( registry . createOptionalNullableType ( getTypeOfThis ( ) ) ) ; params . addChildToFront ( thisTypeNode ) ; thisTypeNode . setOptionalArg ( true ) ; defineDeclaredProperty ( name , new FunctionBuilder ( registry )        . withParamsNode ( params ) . withReturnType ( getReturnType ( ) ) . build ( ) , source    )               ; }                                                                                   } else if ( "apply" . equals ( name ) ) { / / Define the "apply" function lazily . FunctionParamBuilder builder = new FunctionParamBuilder ( registry ) ; / / Ecma - 262 says that apply's second argument must be an Array / / or an arguments object . We don't model the arguments object , / / so let's just be forgiving for now . / / TODO ( nicksantos ) : Model the Arguments object . builder . addOptionalParams ( registry . createNullableType ( getTypeOfThis ( ) ) , registry . createNullableType ( registry . getNativeType ( JSTypeNative . OBJECT_TYPE ) ) ) ; defineDeclaredProperty ( name , new FunctionBuilder ( registry ) . withParams ( builder ) . withReturnType ( getReturnType ( ) ) . build ( ) , source ) ; }
src/com/google/javascript/rhino/jstype/FunctionType.java:497:replace:0,23$if ( toMaybeFunctionType ( ) == null ) { defineDeclaredProperty ( name , new FunctionBuilder ( registry ) . withReturnType ( getReturnType ( ) ) . build ( ) , source ) ; } else { ! hasOwnProperty ( name ) ) { if ( "call" . equals ( name ) ) { / / Define the "call" function lazily . Node params = getParametersNode ( ) ; if ( params = params . cloneTree ( ) ; Node thisTypeNode = Node . newString ( Token . NAME , "thisType" ) ; thisTypeNode . setJSType ( registry . createOptionalNullableType ( getTypeOfThis ( ) ) ) ; params . addChildToFront ( thisTypeNode ) ; thisTypeNode . setOptionalArg ( true ) ; defineDeclaredProperty ( name , new FunctionBuilder ( registry )        . withParamsNode ( params ) . withReturnType ( getReturnType ( ) ) . build ( ) , source    )               ; }                                                                                   } else if ( "apply" . equals ( name ) ) { / / Define the "apply" function lazily . FunctionParamBuilder builder = new FunctionParamBuilder ( registry ) ; / / Ecma - 262 says that apply's second argument must be an Array / / or an arguments object . We don't model the arguments object , / / so let's just be forgiving for now . / / TODO ( nicksantos ) : Model the Arguments object . builder . addOptionalParams ( registry . createNullableType ( getTypeOfThis ( ) ) , registry . createNullableType ( registry . getNativeType ( JSTypeNative . OBJECT_TYPE ) ) ) ; defineDeclaredProperty ( name , new FunctionBuilder ( registry ) . withParams ( builder ) . withReturnType ( getReturnType ( ) ) . build ( ) , source ) ; } }
